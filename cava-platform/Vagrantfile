# -*- mode: ruby -*-
# vi: set ft=ruby :

# We use vagrant-reload to restart the virtual machine after initial provisioning
unless Vagrant.has_plugin?("vagrant-reload")
    puts '!! Missing plugin: vagrant-reload plugin is not installed.' 
    puts 'Please run: vagrant plugin install vagrant-reload'
    exit
end

# We use vagrant-trigger to save logged data to the host prior to shutdown
#unless Vagrant.has_plugin?("vagrant-trigger")
#    puts '!! Missing plugin: vagrant-trigger plugin is not installed.'
#    puts 'Please run: vagrant plugin install vagrant-trigger'
#    exit
#end


# For VMWare use the vagrant-vmware-desktop plugin is required. Also required is a license!
# vagrant plugin license vagrant-vmware-desktop ~/license.lic
# See: https://www.vagrantup.com/docs/providers/vmware/installation
unless Vagrant.has_plugin?("vagrant-vmware-desktop")
    puts '!! Missing plugin: vagrant-vmware-desktop plugin is required.' 
    puts 'Please run: vagrant plugin install vagrant-vmware-desktop'
    exit
end

# Main vagrant configuration follows

Vagrant.configure("2") do |config|
    config.vm.box = "solarium/ghidra-10-debian-buster-xfce"

    config.vm.define :"cava-experiment"

    # Change this to check for base-box version updates
    config.vm.box_check_update = true

    puts "---------------------------------------------------------------------------------"
    puts "---------------------------------------------------------------------------------"
    puts "          !!! Please wait for startup and provisioning to finish !!!" 
    puts " "
    puts "    When complete the virtual machine will restart directly to the XFCE desktop."
    puts "         If you see a username/password login prompt, it isn't finished!! "
    puts "---------------------------------------------------------------------------------"
    puts "---------------------------------------------------------------------------------"



    # TODO: testing for use with xset
    # Possibly remove this? We do not use X11 forwarding as far as I am aware -sjf
    config.ssh.forward_agent = true
    config.ssh.forward_x11 = true
    #config.ssh.forward_x11 = true

    # VMWare Options
    config.vm.provider "vmware_desktop" do |vmware, override|
        vmware.memory = 8192
        vmware.cpus = 4
        vmware.gui = true

        #Settings to fix potential VMX PCI slot number issue in future VMWare Releases
        #See: https://www.vagrantup.com/docs/vmware/boxes.html#vmx-allowlisting
        vmware.vmx["ethernet0.pcislotnumber"] = "33"
    end

    # Parallels Options
    config.vm.provider "parallels" do |prl, override|
        prl.memory = 8192
        prl.cpus = 4
        prl.customize ["set", :id, "--startup-view", "window"]

        # Fix for parallels issues with inode in Parallels
        #puts "Configuring inode shared folder fix for Parallels provider"
        override.vm.synced_folder ".", "/vagrant", mount_options: ["share", "noatime", "host_inodes"]
    end

    # Virtualbox Options - GUI performs very poorly in virtualbox
    config.vm.provider "virtualbox" do |vb, override|
        # Change this to allow vagrant to manage VirtualBox guest additions
        override.vbguest.auto_update = false

        # Display the VirtualBox GUI when booting the machine
        vb.gui = true
  
        # Customize the amount of memory on the VM:
        vb.memory = 8192
        vb.cpus = 4
        vb.customize ["modifyvm", :id, "--vram", "128"] 

        # Below may help in performance for some systems
        vb.customize ["modifyvm", :id, "--largepages", "on"]
        vb.customize ["modifyvm", :id, "--vtxvpid", "on"]
        # See: https://www.virtualbox.org/manual/ch10.html#hwvirt

    end

    # Note: The following lines are provisioning scripts that need to run on both 
    # cava-platform and cava-analysis
    # --------------------- Provisioning Script -----------------------
        # Provisioning now down in a subscript so it can be called from
        # our development environment
        env_vars = {  
                    "LOG" => "/opt/cava-log", 
                    "PROVISION_LOG" => "/opt/cava-log/bootstrap.log", 
                    "BIN" => "/opt/cava", 
                    "BOOTSTRAP" => "/vagrant/bootstrap",
                    "DEBIAN_FRONTEND" => "noninteractive",
                    "GHIDRA_HOME" => "/opt/ghidra"
                    }


    # Initial provision setup
    config.vm.provision "file", source: "bootstrap/provision-check.sh", destination: "/tmp/provision-check.sh", run: 'always'

    # Install core packages
    config.vm.provision "shell", path: "bootstrap/provision-package-install.sh", env: env_vars, preserve_order: true

    # Install instrumentation daemons
    config.vm.provision "shell", path: "bootstrap/provision-instrumentation-daemons.sh", env: env_vars, preserve_order: true

    # Install Ghidra plugins/extensions
    config.vm.provision "shell", path: "bootstrap/provision-ghidra-extensions.sh", env: env_vars, preserve_order: true

    # Configure Ghidra according to stored settings
    config.vm.provision "shell", path: "bootstrap/provision-ghidra-settings.sh", env: env_vars, preserve_order: true

    # Set the desired display resolution and screen size for the virtual machine
    config.vm.provision "shell", path: "bootstrap/provision-display-resolution.sh", run: 'always'

    # Check the current build config
    config.vm.provision "shell", path: "bootstrap/provision-plugin-build-check.sh", env: env_vars, preserve_order: true

    # cava-platform needs a custom UI we designed for the experiment platform also needs to run scripts to save subject data
    puts "-------------------------------------------------------------------------------------------"
    puts "Note: Configuring the environment for research subject use -- 'cava-experiment' environment"
    puts "-------------------------------------------------------------------------------------------"

    # Setup the desktop (XFCE) environment such as desktop icons/panels/etc
    config.vm.provision "shell", path: "bootstrap/provision-setup-desktop.sh", env: env_vars, preserve_order: true

    #Restart the VM after provisioning (TODO: combine with the below Restart block)
    config.vm.provision :reload

    config.vm.provision "shell", path: "bootstrap/provision-finish.sh", env: env_vars, preserve_order: true

    config.trigger.before [:halt, :destroy] do |trigger1|
      trigger1.run_remote = {inline: "bash /vagrant/bootstrap/saveCavaData.sh /vagrant/cava-data" }
      trigger1.info = "
Collected CAVA data and logs has been saved to shared folder: /vagrant/cava-data
!! Please validate that this data is complete before performing box destruction.
!! Data which fails to copy WILL BE LOST after box destruction.
!! Check for zero byte files or missing files in the below output. 
!! You should see the following files (in order of importance): 
   lsl_data.json 
        -- Primmary combined log of all events. 
   ghidra_project_files_<date_time>.tgz 
        -- Ghidra project files (.gpr and .rep files)
   bootstrap.log 
        -- Startup log of the CAVA Platform virtual machine.
   ghidra.log 
        -- Backup log of events produced from within Ghidra and a subset of lsl_data.log.
   km_data.json 
        -- Backup log of keyboard and mouse events and a subset of lsl_data.log.
   LabStreamingLayer.log 
        -- Startup log for the Lab Streaming Layer process.
   KeyboardMouseListener.log 
        -- Startup log for the Keyboard / Mouse Listener process.
   GhidraClickLogs.log 
        -- Backup log of computer-vision-based events and subset of lsl_data.log.
"
    # Below unfortunately runs *before* the inline script, so does not show current files, reverting to manual checks
    #trigger1.run = { inline: "ls -alhR cava-data" }

    end


end
